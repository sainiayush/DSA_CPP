/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

struct Node{
      Node* links[26];
      bool flag=false;
    
       Node* getNode(char ch){
           return links[ch-'a'];
       }
        void setFlag(){
            flag=true;
        }
        bool getFlag(){
            return flag;
        }
        bool containsKey(char ch){
            return links[ch-'a']!=NULL;
        }
        Node* putNode(char ch,Node* node){
            return links[ch-'a']=node;
        }
};
class Trie {
private:
    Node* root;
public:

    /** Initialize your data structure here. */
    Trie() {
        ios::sync_with_stdio(false);
        cin.tie(NULL);
        root=new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* node=root;
        for(char ch: word){
            if(!node->containsKey(ch))
                node->putNode(ch,new Node());
            node=node->getNode(ch);
        }
        node->setFlag();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* node=root;
        for(char ch: word){
            if(!node->containsKey(ch)) return false;
            node=node->getNode(ch);
         }
        return node->getFlag();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* node=root;
        for(char ch:prefix){
            if(!node->containsKey(ch)) return false;
            node=node->getNode(ch);
        }
        return true;
    }
};
