class Solution {
public:
    string longestPalindrome(string s){
        /*  Efficient but Space Complexity -> O(N^2)
        int n=s.size();
        
        vector<vector<bool>> dp(n, vector<bool>(n,false));
        
        int maxLen=1, start{};
        //len-->1
        for(int i=0;i<n;i++) dp[i][i]=true;
        
        //len-->2
        for(int i=0;i<n-1;i++){
            if(s[i]==s[i+1]){
                dp[i][i+1]=true;
                maxLen=2;
                start=i;
            }
        }
        
        
        //len >= 3
        for(int k=3;k<=n;k++){
            for(int i=0;i<n-k+1;i++){
                int j=i+k-1;
                
                if(dp[i+1][j-1] && s[i]==s[j]){
                    dp[i][j]=true;
                    if(maxLen < k){
                        maxLen=k;
                        start=i;
                    }
                }
            }
        }
        */
        
        //Efficient with Constant space
        int n=s.size();
        
        if(n<2) return s;
        int maxLen=1, start=0;
        int low,high;
        
        for(int i=0;i<n;i++){
            low=i-1;
            high=i+1;
        
            while(high<n && s[high]==s[i]) high++;
            while(low>=0 && s[low]==s[i]) low--;
            
            while(low>=0 && high<n && s[low]==s[high]){ high++; low--;}
            
            int len=high-low-1;
            if(maxLen < len){
                maxLen=len;
                start=low+1;
            }
        }
        return s.substr(start,maxLen);
    }
};
