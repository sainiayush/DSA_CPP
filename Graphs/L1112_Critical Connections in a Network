
//Approach : TARJAN's ALGORITHM


template<class T> bool chmin(T& a, const T& b){ if(a <= b) return 0; a = b; return 1; }
class Solution {
public:
    Solution(){
        ios::sync_with_stdio(false);
    }
private:
    vector<vector<int>> ans;
    vector<int> tin, low;
    int timer;
    vector<vector<int>> g;
    vector<bool> vis;
    void BridgeDfs(int node, int par=-1){
        vis[node]=true;
        tin[node]=low[node]=timer++;
        
        for(auto it: g[node]){
            if(it==par) continue;
            if(!vis[it]){
                BridgeDfs(it, node);
                chmin(low[node], low[it]);
                if(tin[node] < low[it])
                    ans.push_back(vector<int>({node, it}));
            }
            else
                chmin(low[node], tin[it]);
        }
    }
public:
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        tin.assign(n, 0);
        low.assign(n, 0);
        vis.assign(n, false);
        timer=0;
        g.resize(n);
        for(auto it: connections)
            g[it.front()].emplace_back(it.back()),
            g[it.back()].emplace_back(it.front());
        
        for(int i=0; i<n; ++i)
            if(!vis[i])
                BridgeDfs(i);
        return ans;
    }
};
