class Solution {
    int merge(vector<int>&nums, int lo,int mid, int hi){
        int j=mid+1;
        int inv=0;
        for(int i=lo;i<=mid;i++){
            while(j<=hi && nums[i] > 2*(long)nums[j])
                j++;
            inv += (j-(mid+1));
        }
        
        
        vector<int>temp;
        
        int left=lo, right=mid+1;
        
        
        while(left<=mid && right<=hi){
            if(nums[left]>nums[right]){
                temp.emplace_back(nums[right++]);
            } else{
                temp.emplace_back(nums[left++]);
            }
        }
        
        while(left<=mid) temp.emplace_back(nums[left++]);
        
        while(right<=hi) temp.emplace_back(nums[right++]);
        
        for(int k=lo;k<=hi;k++){
            nums[k]=temp[k-lo];
        }
        return inv;
        
    }
    int mergeSort(vector<int>& nums,int lo,int hi){
        if(lo>=hi) return 0;
                
            int mid = lo+(hi-lo)/2;
            int inv = mergeSort(nums,lo,mid);
            inv += mergeSort(nums,mid+1,hi);
            inv += merge(nums,lo,mid,hi);
            return inv;       
    }
public:
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }
};
